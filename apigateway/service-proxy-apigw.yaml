---
swagger: "2.0"
info:
  version: "2023-04-12T05:04:29Z"
  title: "service-proxy"
host: "service-proxy.example.com"
basePath: "/api"
schemes:
- "https"
paths:
  /{version}/service-a/userdata:
    post:
      parameters:
      - name: "version"
        in: "path"
        required: true
        type: "string"
      responses:
        "201":
          description: "201 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            X-Request-Id:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        "400":
          description: "400 response"
          headers:
            X-Request-Id:
              type: "string"
        "500":
          description: "500 response"
          headers:
            X-Request-Id:
              type: "string"
        "429":
          description: "429 response"
          headers:
            X-Request-Id:
              type: "string"
        "409":
          description: "409 response"
          headers:
            X-Request-Id:
              type: "string"
      security:
      - ServiceAuth: []
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.docopsVpcEndpoint}"
        httpMethod: "POST"
        uri: "http://${stageVariables.docopsEndpoint}/api/v1/archive/userdata"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.version: "method.request.path.version"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "version"
        in: "path"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Client-Id,X-Auth-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /{version}/service-b/callback:
    post:
      parameters:
      - name: "version"
        in: "path"
        required: true
        type: "string"
      responses:
        "201":
          description: "201 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            X-Request-Id:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        "400":
          description: "400 response"
          headers:
            X-Request-Id:
              type: "string"
        "500":
          description: "500 response"
          headers:
            X-Request-Id:
              type: "string"
        "429":
          description: "429 response"
          headers:
            X-Request-Id:
              type: "string"
        "409":
          description: "409 response"
          headers:
            X-Request-Id:
              type: "string"
      security:
      - ServiceAuth: []
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.flowcontrolVpcEndpoint}"
        httpMethod: "POST"
        uri: "http://${stageVariables.flowcontrolEndpoint}/api/v1/callback"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.version: "method.request.path.version"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "version"
        in: "path"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Client-Id,X-Auth-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /{version}/service-b/jobstatus/{jobname}:
    post:
      produces:
      - "application/json"
      parameters:
      - name: "jobname"
        in: "path"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - ServiceAuth: []
      x-amazon-apigateway-integration:
        connectionId: "v6ozet"
        httpMethod: "POST"
        uri: "http://${stageVariables.flowcontrolEndpoint}/api/v1/jobstatus/{jobname}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.version: "method.request.path.version"
          integration.request.path.jobname: "method.request.path.jobname"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "version"
        in: "path"
        required: true
        type: "string"
      - name: "jobname"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /{version}/service-b/triggerjob/{jobname}:
    post:
      produces:
      - "application/json"
      parameters:
      - name: "jobname"
        in: "path"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - ServiceAuth: []
      x-amazon-apigateway-integration:
        connectionId: "v6ozet"
        httpMethod: "POST"
        uri: "http://${stageVariables.flowcontrolEndpoint}/api/v1/triggerjob/{jobname}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.version: "method.request.path.version"
          integration.request.path.jobname: "method.request.path.jobname"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "version"
        in: "path"
        required: true
        type: "string"
      - name: "jobname"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /{version}/service-c/change:
    post:
      parameters:
      - name: "version"
        in: "path"
        required: true
        type: "string"
      responses:
        "201":
          description: "201 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            X-Request-Id:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        "400":
          description: "400 response"
          headers:
            X-Request-Id:
              type: "string"
        "500":
          description: "500 response"
          headers:
            X-Request-Id:
              type: "string"
        "429":
          description: "429 response"
          headers:
            X-Request-Id:
              type: "string"
        "409":
          description: "409 response"
          headers:
            X-Request-Id:
              type: "string"
      security:
      - ServiceAuth: []
      x-amazon-apigateway-integration:
        connectionId: "${stageVariables.templateVpcEndpoint}"
        httpMethod: "POST"
        uri: "http://${stageVariables.templateEndpoint}/template/templateownerchange"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.version: "method.request.path.version"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        type: "http_proxy"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "version"
        in: "path"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Client-Id,X-Auth-Origin'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
securityDefinitions:
  ServiceAuth:
    type: "apiKey"
    name: "Unused"
    in: "header"
    x-amazon-apigateway-authtype: "custom"
    x-amazon-apigateway-authorizer:
      authorizerUri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:xxxxxxxxxxx:function:service_proxy/invocations"
      authorizerCredentials: "arn:aws:iam::xxxxxxxxxxx:role/LambdaRole"
      authorizerResultTtlInSeconds: 0
      identitySource: "method.request.header.X-Auth-Key, method.request.header.X-Api-Key"
      type: "request"
definitions:
  Empty:
    type: "object"
    title: "Empty Schema"
x-amazon-apigateway-gateway-responses:
  UNAUTHORIZED:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
    responseTemplates:
      application/json: "{\"error_code\":\"invalid_credentials\"}"
